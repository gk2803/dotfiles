* Terminal
requires =cmake= and =libvterm-dev=
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    )
  (use-package multi-vterm
    :ensure t)
#+end_src
* which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)) ;;ensure t makes sure this package is installed
#+end_src
* miscellaneous
#+begin_src emacs-lisp
  ;; server start
  (server-start)
  ;; yes or no alias
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; no backups
  ;; no autosaves
  (setq make-backup-file nil) 
  (setq auto-save-default nil)

  ;; cursor highlight
  (global-hl-line-mode -1)

  ;;prettify symbols like lambda
  (global-prettify-symbols-mode t)

  ;; no tool bar, menu bar, scroll bar
  (tool-bar-mode -1) 
  (menu-bar-mode -1) 
  (scroll-bar-mode -1)

  ;; startup message
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)

  ;; relative numbers even in org mode with bullets 
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode) ;; I have no Idea what this is

  ;; global keybindings
  (global-set-key (kbd "C-c a") 'beginning-of-buffer)
  (global-set-key (kbd "C-c e") 'end-of-buffer)
  (global-set-key (kbd "M--") 'count-words)
  (global-set-key (kbd "M-o") 'mode-line-other-buffer)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)  
#+end_src
** mode line
#+begin_src emacs-lisp
  (setq-default mode-line-format
		'("%e" ;some information may appear in the echo area if content too long
		  my-modeline-buffer-name
		  "    "
		  my-modeline-major-mode

		  ))

  (defvar-local my-modeline-buffer-name
      '(:eval
	(propertize (buffer-name) 'face 'warning))	
    "Mode line construct to display the buffer mode."
    )

  (defun my-modeline-major-mode-name ()
    "Return capitalized 'major-mode'"
    (capitalize (string-replace "-mode" "" (symbol-name major-mode)))
    )

  (defvar-local my-modeline-major-mode
      '(:eval
	(when (mode-line-window-selected-p)
	  (list
	   (propertize "Î»" 'face 'shadow)
	   " "
	   (propertize  (my-modeline-major-mode-name) 'face 'bold))
	  )
	"Mode line construct to display the major mode."))



  (dolist (construct '(my-modeline-major-mode
		       my-modeline-buffer-name))
    (put construct 'risky-local-variable t))

  (defun display-custom-time-format ()
    "Display the current time formatted as YYYY-MM-DD HH:MM:SS in the echo area."
    (interactive)
    (message (format-time-string "%a %B, %d %H:%M")))
  (display-custom-time-format)






  (mode-line-window-selected-p)
  (defun mode-line-window-selected-p()
    "Return non-nil if we're updating the mode line for the selected window.
  This function is meant to be called in `:eval' mode line constructs
  to allow altering the look of the mode line depending on whether the mode line
  belongs to the currently selected window or not."
    (let ((window (selected-window)))
      (or (eq window (old-selected-window))
	  (and (minibuffer-window-active-p (minibuffer-window))
	       (with-selected-window (minibuffer-window)
		 (eq window (minibuffer-selected-window)))))))

#+end_src

* beacon 
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init 
    (beacon-mode 1))
#+end_src
* Org
** source code edit 
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c s") 'org-edit-src-code)
#+End_src
** language evaluation
this is used in order to evaluate python code inside a block.
Example: we press ~C-c C-,~ in order to invoke the
~org-insert-structure-template~ function, and then we press ~s~ in
order to determine the kind of structure, in our case a source code.
We proceed to specify the language of the source code by typing python
and inside the code block we insert our python code.  The ~python~
keyword that we specified at the top of the code block is telling org
that the code inside the block is written in python, so you have to
take care of the indentation and syntax highlight.  The default naming
convention for python interpreter in org is ~python~. In that sense we
use ~org-babel-python-command "python3"~ to  specify the name
of the python interpreter on our system.

In the same manner we can configure the ~/bin/bash~ codeblock
#+begin_src emacs-lisp
  (setq org-babel-python-command "python3")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t) 
     (shell . t)))
#+end_src
** miscellaneous
This is a keybinding for the ~org-store-link~ function that stores a
link that can be later used by the ~org-insert-link~ function 
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

When reaching the 80 character limit in a org-mode file then the line
will automatically change
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
			     (setq fill-collumn 120)
			     (auto-fill-mode 1)))
#+end_src

open link at the current buffer: [[https://emacs.stackexchange.com/questions/69706/how-to-open-a-file-from-an-org-link-within-current-window][stack]]

#+begin_src emacs-lisp
  (defun mda/org-open-current-window ()                                              
    "Opens file in current window."                                                  
    (interactive)                                                                    
    (let ((org-link-frame-setup (cons (cons 'file 'find-file) org-link-frame-setup)))
      (org-open-at-point)))                  
  (define-key global-map (kbd "C-c o") #'mda/org-open-current-window)   
#+end_src

hide emphasis markers, better for previewing
#+begin_src emacs-lisp
  (defun toggle-org-hide-emphasis-markers ()
    "Toggle value of org=hide-emphasis-markers`"
    (interactive)
    (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
    (org-mode-restart))  
#+end_src

set org directory

#+begin_src emacs-lisp
  (setq org-directory "~/Nextcloud/org")
#+end_src
** latex config
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-highlight-latex-and-related '(latex))
#+end_src
** Capture
First we create some =org-capture= templates in order to save our
current Tasks, meetings, etc.  Those templates create the
corresponding org files within the =~/org/= directory.  The
=org-capture= files can be used as a mean to collect all of our
captures coming from our individual note files.  Thus, instead of
cluttering our workflow by pointing multiple individual note files to
=org-agenda=, we can link a select number of capture files that act as
a gateway to our individual notes. 

#+begin_src emacs-lisp
  ;; %?  is a placeholder for your cursor
  ;; %i  is a placeholder for inserting selected text, or none if nothing is selected
  ;; %a  is a placeholder for inserting a link to the location from the file that the capture was created
  (use-package org-capture
    :ensure nil
    :bind ("C-c c" . org-capture)
    :config
    (require 'org)
    (setq org-capture-templates
	  `(("w" "Add to the wishlist (may do some day)" entry
	     (file+headline "tasks.org" "Wishlist")
	     ,(concat "* %^{Title}\n"
		      ":PROPERTIES:\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%?")
	     :empty-lines-after 1)
	    ("u" "Unprocessed" entry
	     (file+headline "tasks.org" "Unprocessed")
	     ,(concat "* %^{Title}\n"
		      ":PROPERTIES:\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%i%?")
	     :empty-lines-after 1)
	    ("t" "TODO" entry
	     (file+headline "tasks.org" "Tasks with a date")
	     ,(concat "* TODO %^{Title} %^g\n"
		      "%^{How time sensitive it is|SCHEDULED|DEADLINE}: %^t\n"
		      ":PROPERTIES:\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%i%?")
	     :empty-lines-after 1)
	    ("h" "Habits" entry
	     (file+headline "tasks.org" "Habits")
	     ,(concat "* TODO %^{Title}\n"
		      "%^{|SCHEDULED}: %^t\n"
		      ":PROPERTIES:\n"
		      ":STYLE:    habit\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%i%?")
	     :empty-lines-after 1)
	    ("f" "Fitness Tracking" entry
	     (file+datetree "fit.org")
	     ,(concat "* %^{What kind of activity|Run|Workout} \n"		    
		      ":PROPERTIES:\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%?")
	     :empty-lines-after 1
	     :tree-type week)
	    )))
#+end_src
** Agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :bind ("C-c A" . org-agenda)
    :config
    (setq org-agenda-include-diary t)
    (setq org-agenda-files `(,org-directory))



    ;; habits
    (require 'org-habit)
    (setq org-habit-graph-column 50)
    (setq org-habit-preceding-days 9)
    (setq org-habit-show-all-today t)
    )

#+end_src
** Org Bullets Package
prettifies org-mode 
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
* Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src
* Marginalia
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src
* Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
	   ("C-c M-x" . consult-mode-command)
	   ("C-x C-b". consult-buffer)
	   ("M-s M-l". consult-line)
	   ("M-s M-g". consult-grep)
	   ("M-s M-o". consult-outline)
	   )
    )
#+end_src
* Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim))
    :init
    )
#+end_src
* Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
* Denote
Now, what if I want to reference the source when =denote-region= is
called?

1. The function, =my-denote-region-get-source-references=, checks
   the current buffer mode, if it is =eww-mode= it inserts the url as a
   reference, if it is a file it inserts the
2. The function, =denote-region-with-reference= calls =my-denote-region= and
   then adds the reference at the end of the file by calling the first
   function
3. The function, =my-denote-region= is my version of the function
   =denote-region= which adds also prompts for a signature.
#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :init
    (setq denote-directory '"~/Nextcloud/Documents/publicNotes")
    :bind
    (:map global-map
	  ("C-c n j" . denote-journal-extras-new-or-existing-entry)
	  ("C-c n r" . my-denote-reference)
	  ("C-c n f" . my-denote-fleeting)
	  ("C-c n n" . my-denote-zk)
	  )	  
    :config
    ;; set the order of denote naming scheme
    (setq denote-file-name-components-order '(signature title keywords identifier))      

    ;; Variant of `my-denote-region' to reference the source
    (defun my-denote-region-get-source-reference ()
      "Get a reference to the source for use with `my-denote-region'.
    The reference is a URL or an Org-formatted link to a file."
      ;; We use a `cond' here because we can extend it to cover more
      ;; cases.
      (cond
       ((derived-mode-p 'eww-mode)
	(plist-get eww-data :url))
       ;; Here we are just assuming an Org format.  We can make this more
       ;; involved, if needed.
       (buffer-file-name
	(format "[[file:%s][%s]]" buffer-file-name (buffer-name)))))

    (defun my-denote-region (&optional lst)
      "Call `denote-subdirectory-signature-title-keywords' and insert therein the text of the active region.
  If LST is not provided, use the default list '(title signature)."
      (declare (interactive-only t))
      (interactive)
      (let ((denote-prompts (or lst '(subdirectory signature title keywords))))  ;; Use LST or default '(title signature)
	(if-let (((region-active-p))
		 ;; Capture the text early, otherwise it will be empty
		 ;; the moment `insert` is called.
		 (text (buffer-substring-no-properties (region-beginning) (region-end))))
	    (progn
	      (let ((denote-ignore-region-in-denote-command t))
		(call-interactively #'denote))
	      (push-mark (point))
	      (insert text)
	      (run-hook-with-args 'denote-region-after-new-note-functions (mark) (point)))
	  ;; If no region is active, just call `denote` with the prompt list.
	  (call-interactively #'denote))))

    (defun my-denote-region-with-reference-zk ()
      "Like `denote-region', but add the context afterwards.
      For how the context is retrieved, see `my-denote-region-get-source-reference'."
      (interactive)
      (let ((context (my-denote-region-get-source-reference))
	    (denote-directory "~/Nextcloud/Documents/publicNotes/"))
	(my-denote-region '(signature title keywords))
	(when context
	  (goto-char (point-max))
	  (insert "\n")
	  (insert context))))

    (defun my-denote-region-with-reference ()
      "Like `my-denote-region-with-reference-zk' but saved at references
  and has no signature"
      (interactive)
      (let ((context (my-denote-region-get-source-reference))
	    (denote-directory "~/Nextcloud/Documents/publicNotes/references"))
	(my-denote-region '(title keywords))
	(when context
	  (goto-char (point-max))
	  (insert "\n")
	  (insert context))))

    (defun my-denote-fleeting ()
      "Create a simple post note, something you might want to remember,
    everything goes"
      (declare (interactive-only t))
      (interactive)
      (let ((denote-directory "~/Nextcloud/Documents/publicNotes/inbox")
	    (denote-infer-keywords nil)
	    (denote-known-keywords '("fleeting"))
	    (denote-prompts '(title keywords)))
	(call-interactively 'denote)))

    (defun my-denote-zk ()
      "Create the main zettelkasten note"
      (declare (interactive-only t))
      (interactive)
      (let ((denote-directory "~/Nextcloud/Documents/publicNotes/")
	    (denote-prompts '(signature title keywords)))
	(call-interactively 'denote)))

    (defun my-denote-reference ()
      "Create a reference note"
      (declare (interactive-only-t))
      (interactive)
      (let ((denote-directory "~/Nextcloud/Documents/publicNotes/references/")
	    (denote-infer-keywords nil)
	    (denote-known-keywords '("reference" "book"))
	    (denote-prompts '(title keywords)))
	(call-interactively 'denote)))

    (defun my-denote-curated ()
      "Create a curated Note, a well established thought, an article"
      (declare (interactive-only t))
      (interactive)
      (let ((denote-directory "~/Nextcloud/Documents/publicNotes/curated")
	    (denote-infer-keywords nil)
	    (denote-known-keywords '("curated"))
	    (denote-prompts '(title keywords)))
	(call-interactively 'denote)))) 

#+end_src
* Dired
** basic config
Taken from protesilaos.com
As I already explained, Dired is a layer of interactivity on top of the standar
Unix tools. We can see this in how Dired produces the File listing and how we
can affect ~ls~ program accepts an ~-l~ flag for a "long", detailed list of
files. This is what Dired uses. But we can pass more flags by setting the value
of ~dired-listing-switches~. Do ~M-X man~ and then search for the ~ls~ manpage
to learn about what I have here. In short:

- A
  show hidden files ("dotfiles"), such as ~.bashrc~, but omit the implied ~.~
  and ~..~ targets. The latter two refer to the present and parent directory,
  respectively.
  
- G
  Do not show the group namd in the long listing. Only show the owner of the
  file.

- F
  Differentiate regular from special files by appending a character to them. The
  ~*~ is for executables, for the ~/~ is for directories, the ~|~ is for a named
  pipe, the ~=~ is for a socket, the ~@~ and the ~>~ are for stuff I have never
  seen.

- h
  make file sizes easier to read, such as ~555k~ instead of ~568024~

- l
  Produce a long, detalied listing. Dired requires this.

- v
  sort files by version numbers, such that ~file1~, ~file2~, ~file10~ appear in
  this order instead of 1, 10, 20. The latter is called "lexicographic"

- -group-directories-first
Does what it says to place all directories before files in the listing. I prefer
this over a strict sorting that does not differentiate between files and
directories

-- time-style-=long-iso
Uses the internation standard for time representation in the file listing. So
we have something like ~2024-06-30 01:15~ to show the last modified time
#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired)
    :bind (:map dired-mode-map
		("C-c p" . dired-preview-mode)) ;; toggles prot's preview-mode
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches ;; I have disabled the -v flag because
	  ;; freebsd doesnt have that option
	  "-AFGhlv --group-directories-first --time-style=long-iso"))

#+end_src

** miscellaneous tweaks
These are some minor tweaks that i do not really care about. The only
one which is really nice is in my opinion the hook that involves
~dired-hide-details-mode~. This is the command that hides the noise
output of the ~ls -l~ flag, leaving only the file names in the
list. We can toggle this effect at any time with the ~(~ key, by default.

I disable the repetition of the ~j~ key as I do use ~repeat-mode~.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired)
    :config
    (setq dired-auto-revert-buffer #'dired-directory-changed-p)
    (setq dired-make-directory-clickable t)
    (setq dired-free-space nil)
    (setq dired-mouse-drag-files t)
    (add-hook 'dired-mode-hook #'dired-hide-details-mode)
    (add-hook 'dired-mode-hook #'hl-line-mode)
    (define-key dired-jump-map (kbd "j") nil))
#+end_src
** varius conveniences
The ~dired-aux.el~ and ~dired-x.el~ are two build-in libraries that
provide usefull extras for Dired. The highlights from what I have here
are:
+ the user option ~dired-create-destination-dirs~ and
  ~dired-create-destination-dirs-on-dirsep~, which offer to create the
  specified directory path if missing.
+ the user options ~dired-clean-up-buffers-too!~ and
  ~dired-clean-confirm-killing-deleted-buffers~ which cover the
  deletion of buffers related to files that we deleted from Dired
+ the key binding for ~dired-do-open~, which opens the file or
  directory externally
  #+begin_src emacs-lisp
    (use-package dired-aux
      :ensure nil
      :bind
      (:map dired-mode-map
	    ("C-+" . dired-create-empty-file)
	    ("M-s f" . nil))
      :config
      (setq dired-isearch-filenames 'dwim)
      (setq dired-create-destination-dirs 'ask)
      (setq dired-vc-rename-file t)
      (setq dired-do-revert-buffer (lambda (dir) (not (file-remote-p dir))))
      (setq dired-create-destination-dirs-on-trailing-dirsep t))

    (use-package dired-x
      :ensure nil
      :after dired
      :bind
      (:map dired-mode-map
	    ("I" . dired-info))
      :config
      (setq dired-clean-up-buffer-too t)
      (setq dired-clean-confirm-killing-deleted-buffers t)
      (setq dired-x-hands-off-my-keys t)
      (setq dired-bind-man nil)
      (setq dired-bind-info nil))
  #+end_src
** The dired-subtree section
The ~dired-subtree~ package by Matus Goljer provides the convenience
of quickly revealing the contents of the directory at point. We do not
have to insert its contents below the current listing as we would
normally do in Dired, nor do we have to open another buffer just to
check if we need to go further.

#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))
#+end_src
** dired-preview
#+begin_src emacs-lisp
  (use-package dired-preview
    :ensure t
    :config
    (setq dired-preview-delay 0.1)
    )

#+end_src
* Latex
** Auctex
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex)
#+end_src
** LaTeX-auto-activating-snippets
This package need to have ~aas~ installed as well.
https://github.com/tecosaur/LaTeX-auto-activating-snippets
#+begin_src emacs-lisp
  (use-package laas
    :ensure t
    :hook ((org-mode LaTeX-mode) . laas-mode)
    :config ; do whatever here
    (defun my-laas-beginning-of-line-condition()
      "Return t if snippet key is at the beginning of line"
      (interactive)
      (looking-back "^dm" nil))
    (aas-set-snippets 'laas-mode 
      ;; set condition!
      :cond #'texmathp ;; expand only while in math
      "lim" '(yas "\\lim_{x\\to\\infty} $0")
      "cap" '(yas "\\cap$1")		      
      "cup" '(yas "\\cup$1")
      "ceil" '(yas "\\lceil $1 \\rceil $0")
      "flr" '(yas "\\lfloor $1 \\rfloor $0")
      "cir" "\\circ " ;; composition
      "supp" "\\supp"
      "On" "O(n)"
      "O1" "O(1)"
      "Olog" "O(\\log n)"
      "Olon" "O(n \\log n)"
      ";;{" " \\subseteq "
      "sq" '(yas "\\sqrt{$1} $0")		      
      ;; bind to functions!
      "Sum" (lambda () (interactive)
	      (yas-expand-snippet "\\sum_{n=$1}^{$2} $0"))
      "Span" (lambda () (interactive)
	       (yas-expand-snippet "\\Span($1)$0"))
      ;; add accent snippets
      :cond #'laas-object-on-left-condition
      "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))
      :cond (lambda() (not (texmathp))) ;;expand when not in math 
      "fm" '(yas "\\\\( $1 \\\\)")

      ))
#+end_src
* YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

#+end_src
* Diary
First I want to change the directory of the diary file in order to
allign with the rest of my note-taking workflow
#+begin_src emacs-lisp
  (use-package diary
    :ensure nil
    :defer t
    :init
    (setq diary-file "~/Nextcloud/org/diary"))
#+end_src
* Calendar
The main reason why I wanted to insert my location on emacs-calendar
was in order for emacs to be able to pick my current sunset and
sunrise times and choose a theme accordingly.
#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :commands (calendar)
    :config
    (setq calendar-latitude 41.08499)
    (setq calendar-longitude 23.54757)
    (setq calendar-location-name "Serres, Greece")
    )
#+end_src
* Modus Themes
change the theme based on the sunset and sunrise times.
#+begin_src emacs-lisp
    (use-package modus-themes
      :ensure t
      :demand t
      :bind (("<f5>" . modus-themes-toggle)
	     ("C-<f5>" . modus-themes-select))
      :config
      ;; configure modus themes
      (setq modus-themes-italic-constructs t
	    modus-themes-bold-constructs nil)

      ;; Configure modus themes to toggle with the 'modus-themes-toggle' command
      (setq modus-themes-to-toggle '(modus-operandi modus-vivendi)))

    ;; Keybinding to toggle between modus vivendi and modus operandi


    ;; Function to convert current time to decimal representation
    ;; (defun current-time-to-decimal ()
    ;;   "Return the current time as a floating point number where 18:30 is represented as 18.50."
    ;;   (let* ((now (decode-time (current-time)))
    ;; 	 (hour (nth 2 now))
    ;; 	 (minute (nth 1 now)))
    ;;     (+ hour (/ minute 60.0))))

    ;; ;; Function to get current date as a list 
    ;; (defun current-date()
    ;;   "Return the current date as a list of (mont day year)."
    ;;   (let* ((now (decode-time (current-time)))
    ;; 	 (month (nth 4 now))
    ;; 	 (day (nth 3 now))
    ;; 	 (year (nth 5 now)))
    ;;     (list month day year)))


    ;; (setq my-sunrise-sunset (solar-sunrise-sunset (current-date)))

    ;; ;; Load themes based on current time
    ;; (let ((sunrise (car (car my-sunrise-sunset)))
    ;;       (sunset (car (cadr my-sunrise-sunset))))
    ;;   (if (and (>=  (current-time-to-decimal) sunrise)
    ;; 	   (< (current-time-to-decimal) sunset))
    ;;       (load-theme 'modus-operandi-tinted :no-confirm)
    ;;     (load-theme 'modus-vivendi-tinted  :no-confirm)))
#+end_src

* RSS/Atom 
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :defer t
    :bind
    ("C-x e" . elfeed)
    :config
    (setq elfeed-feeds '("https://protesilaos.com/master.xml" "https://lyra.horse/blog/posts/index.xml")))  
#+end_src
* browse-url
basic configuration for EWW(Emas Web Browser). EWW loads, parses and
displays web pages using [[*shr (simple HTML renderer)][shr]]. A prequisite for using shr is building
emacs with libxml2 support.

#+begin_src emacs-lisp
  (use-package browse-url
    :ensure nil
    :defer t
    :config
    (setq browse-url-browser-function 'eww-browse-url)
    (setq browse-url-secondary-browser-function 'browse-url-default-browser))
#+end_src
* shr (simple HTML renderer)
#+begin_src emacs-lisp
  (use-package shr
    :ensure nil
    :defer t
    :config
    (setq shr-use-colors nil)             ; t is bad for accessibility
    (setq shr-use-fonts nil)              ; t is not for me
    (setq shr-max-image-proportion 0.6)
    (setq shr-image-animate nil)          ; No GIFs, thank you!
    (setq shr-width fill-column)          ; check `prot-eww-readable'
    (setq shr-max-width fill-column)
    (setq shr-discard-aria-hidden t)
    (setq shr-cookie-policy nil))
#+end_src
* window options and keybindings
#+begin_src emacs-lisp
  (use-package window
    :ensure nil
    :demand t
    :bind
    (:map global-map
	  ("C-x !" . delete-other-windows-vertically)
	  ("C-x _" . balance-windows)
	  ("C-x }" . enlarge-window)
	  ("C-x {" . shrink-window)
	  ("C-x >" . enlarge-window-horizontally) ;;override scroll-right
	  ("C-x <" . shrink-window-horizontally) ;;override scroll-left
	  ("C-x -" . fit-window-to-buffer)
	  ))

#+end_src
* Markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :config
    (setq markdown-fontify-code-blocks-natively t))
#+end_src
* Anki-editor
#+begin_src emacs-lisp
  (use-package org-anki
    :ensure t
    )
#+end_src
* Development
** Languages
*** Language Server
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred) ;; lsp mode gets loaded when lsp, lsp-deferred are triggered
    :init
    (setq lsp-keymap-prefix "C-c C-l")
    :config
    (lsp-enable-which-key-integration t)
    (setq read-process-output-max (* 1024 1024))
    (setq lsp-ui-sideline-enable nil))


  ;; na allaksw to keybind
#+end_src
*** Python
#+begin_src emacs-lisp
  (use-package python-mode
    :mode "\\.py\\'"
    :hook (python-mode . lsp-deferred)
    :config
    (setq python-indent-level 4))

#+end_src
*** Php
#+begin_src emacs-lisp
  (use-package php-mode
    :mode "\\.php\\'"
    :hook (php-mode . lsp-deferred)
    :config
    (setq php-indent-level 4))
#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp-deferred))
  (add-to-list 'exec-path "~/.cargo/bin")
#+end_src
** Tree sitter
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
	  (cmake "https://github.com/tree-sitter/tree-sitter-cmake")
	  (elisp "https://github.com/tree-sitter/tree-sitter-elisp") ;;this doesn't work
	  (go "https://github.com/tree-sitter/tree-sitter-go")
	  (html "https://github.com/tree-sitter/tree-sitter-html")
	  (python "https://github.com/tree-sitter/tree-sitter-python")
	  (rust "https://github.com/tree-sitter/tree-sitter-rust")))
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)  

    )

#+end_src
* Kindle
#+begin_src emacs-lisp
  (use-package clip2org
    :load-path "~/.emacs.d/clip2org/"
    :config
    (setq clip2org-clippings-file "~/Downloads/My Clippings.txt"))
#+end_src
* email
** mu4e
#+begin_src emacs-lisp

  (use-package mu4e
    :ensure nil
    :defer t
    ;; we do ensure nil because we are using the mu4e installed by the package manager
    ;; of our linux distribution
    ;; we might need to add a load path
    :load-path "/usr/share/emacs/site-lisp/elpa-src/mu4e-1.8.14/"
    :config
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/.mail/uni/")

    (setq mu4e-drafts-folder "/uni/Drafts")
    (setq mu4e-sent-folder "/uni/Sent Items")
    (setq mu4e-refile-folder "/uni/Archive")
    (setq mu4e-trash-folder "/uni/Deleted Items")

    (setq mu4e-maildir-shortcuts
	  '(("/uni/Inbox" . ?i)
	    ("/uni/Deleted Items" . ?t)
	    ("/uni/Drafts" . ?d)
	    ("/uni/Archive" . ?a)
	    ("/uni/Sent Items" . ?s)))

    (require 'cl-lib)
    (require 'smtpmail)

    ;;; Call the oauth2ms program to fetch the authentication token
    (defun fetch-access-token ()
      (with-temp-buffer
	(call-process "oauth2ms" nil t nil "--encode-xoauth2")
	(buffer-string)))
    (add-to-list 'smtpmail-auth-supported 'xoauth2)

       ;;; Add new authentication method for xoauth2
    (cl-defmethod smtpmail-try-auth-method
      (process (_mech (eql xoauth2)) user password)
      (let* ((access-token (fetch-access-token)))
	(smtpmail-command-or-throw
	 process
	 (concat "AUTH XOAUTH2 " access-token)
	 235)))

       ;;; Register the method
    (with-eval-after-load 'smtpmail
      (add-to-list 'smtpmail-auth-supported 'xoauth2))

    ;;smtp config
    (setq smtpmail-smtp-server "smtp.office365.com"
	  smtp-default-smtp-server "smtp.office365.com"
	  smtpmail-smtp-service 587
	  smtpmail-stream-type 'starttls
	  message-send-mail-function 'smtpmail-send-it
	  smtpmail-auth-credentials nil)
    ;;
    (setq user-mail-address "std154940@ac.eap.gr"
	  user-full-name "Georgios Kiriazidis")

    (setq smtpmail-debug-info t)
    (setq smtpmail-debug-verb t)
    )

#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

