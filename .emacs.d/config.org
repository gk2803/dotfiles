* terminal
requires =cmake= and =libvterm-dev=
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
  (use-package multi-vterm
    :ensure t)
#+end_src
* which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)) 
#+end_src
* miscellaneous
#+begin_src emacs-lisp
  ;; server start
  (require 'server)
  (unless (server-running-p)
    (server-start))

  ;; yes or no alias
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; cursor highlight
  (global-hl-line-mode -1)

  ;;prettify symbols like lambda
  (global-prettify-symbols-mode t)

  ;; no tool bar, menu bar, scroll bar
  (tool-bar-mode -1) 
  (menu-bar-mode -1) 


  ;; startup message
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)

  ;; relative numbers even in org mode with bullets 
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode) ;; I have no Idea what this is

  ;; global keybindings
  					  ;(global-set-key (kbd "C-c a") 'beginning-of-buffer)
  					  ; (global-set-key (kbd "C-c e") 'end-of-buffer)
  (global-set-key (kbd "M--") 'count-words)
  (global-set-key (kbd "M-o") 'mode-line-other-buffer)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)

  (set-face-attribute 'default nil :height  150)



#+end_src
* beacon 
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init 
    (beacon-mode 1))
#+end_src
* Org
#+begin_src emacs-lisp
  (use-package org
    :load-path "~/.emacs.d/elpa/org-mode/lisp/"
    :ensure t
    :hook (org-mode . (lambda ()   ;; make local var has separate value  in the current buffer
  		      (company-mode)
  		      (set (make-local-variable 'company-backends)
  			   '(company-yasnippet))))
    :bind (("C-c r" . org-anki-sync-entry))
    :config
    (setq org-babel-python-command "python3")
    (setq org-directory "~/Nextcloud/org")
    (setq fill-collumn 120)
    (setq org-src-fontify-natively t)
    
    (setq org-id-link-to-org-use-id t) ;; sets a unique custom id property under header when `org-store-link' is invoked
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t) 
       (shell . t)
       (rust . t)))
    
    ;; org anki
    (setq org-anki-default-note-type "Basic (and reversed card)")
    
    (defun toggle-org-hide-emphasis-markers ()
      "Toggle value of org=hide-emphasis-markers`"
      (interactive)
      (setq org-hide-emphasis-markers (not org-hide-emphasis-markers))
      (org-mode-restart))
    )
#+end_src
** language evaluation
this is used in order to evaluate python code inside a block.
Example: we press ~C-c C-,~ in order to invoke the
~org-insert-structure-template~ function, and then we press ~s~ in
order to determine the kind of structure, in our case a source code.
We proceed to specify the language of the source code by typing python
and inside the code block we insert our python code.  The ~python~
keyword that we specified at the top of the code block is telling org
that the code inside the block is written in python, so you have to
take care of the indentation and syntax highlight.  The default naming
convention for python interpreter in org is ~python~. In that sense we
use ~org-babel-python-command "python3"~ to  specify the name
of the python interpreter on our system.

In the same manner we can configure the ~/bin/bash~ codeblock
#+begin_src emacs-lisp
  (setq org-babel-python-command "python3")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t) 
     (shell . t)
     (rust . t)))
  (setq org-src-fontify-natively t)
  (use-package ob-rust
    :ensure t
    :defer t)
#+end_src
** miscellaneous
This is a keybinding for the ~org-store-link~ function that stores a
link that can be later used by the ~org-insert-link~ function 
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

** latex config
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-highlight-latex-and-related '(latex))
#+end_src
** Capture
:PROPERTIES:
:ID:       cd548a7a-a6fc-4a1c-97d5-5137561e5089
:END:
First we create some =org-capture= templates in order to save our
current Tasks, meetings, etc.  Those templates create the
corresponding org files within Org directory.  The
=org-capture= files can be used as a mean to collect all of our
captures coming from our individual note files.  Thus, instead of
cluttering our workflow by pointing multiple individual note files to
=org-agenda=, we can link a select number of capture files that act as
a gateway to our individual notes. 

#+begin_src emacs-lisp
  ;; '%?'  is a placeholder for your cursor

  ;; '%i' is a placeholder for inserting selected region, or none if
  ;; nothing is selected

  ;; '%a' is a placeholder for inserting a link to the location from the
  ;; file that the capture was created

  ;; '%A' like '%a', but prompt for the description part

  ;; '%l' like '%a', but only insert the literal link

  ;; in the same manner
  ;; '%t' Timestamp, date only

  ;; '%T' Timestamp, date and time

  ;; '%u', '%U', like '%t', '%T' above, but inactive timestamps

  ;; '%^{PROMPT}' prompt the user for a string and replace this sequence
  ;; with it.  You may specify a default value and a completion table with
  ;; '%^{prompt|default_val_goes_first|completion2|completion3..}'
  (use-package org-capture
    :ensure nil
    :bind ("C-c c" . org-capture)
    :config
    (require 'org)
    (setq org-capture-templates
	  `(("w" "Add to the wishlist (may do some day)" entry
	     (file+headline "tasks.org" "Wishlist")
	     ,(concat "* %^{Title}\n"
		      ":PROPERTIES:\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%?")
	     :empty-lines-after 1)
	    ("u" "Unprocessed" entry
	     (file+headline "tasks.org" "Unprocessed")
	     ,(concat "* %^{Title}\n"
		      ":PROPERTIES:\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%i%?")
	     :empty-lines-after 1)
	    ("t" "TODO" entry
	     (file+headline "tasks.org" "Tasks with a date")
	     ,(concat "* TODO %^{Title} %^g\n"
		      "%^{How time sensitive it is|SCHEDULED|DEADLINE}: %^t\n"
		      ":PROPERTIES:\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%i%?")
	     :empty-lines-after 1)
	    ("h" "Habits" entry
	     (file+headline "tasks.org" "Habits")
	     ,(concat "* TODO %^{Title} %^g\n"
		      "%^{|SCHEDULED}: %^t\n"
		      ":PROPERTIES:\n"
		      ":STYLE:    habit\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%i%?")
	     :empty-lines-after 1)
	    ("f" "Fitness Tracking" entry
	     (file+datetree "fit.org")
	     ,(concat "* %^{What kind of activity|Run|Workout} \n"		    
		      ":PROPERTIES:\n"
		      ":CAPTURED: %U\n"
		      ":END:\n\n"
		      "%?")
	     :empty-lines-after 1
	     :tree-type week)
	    )))
#+end_src
** Agenda
#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :bind ("C-c A" . org-agenda)
    :config
    (setq org-agenda-include-diary t)
    (setq org-agenda-files `(,org-directory))
    ;; The value we will be editing for custom agenda view
    ;; is `org-agenda-custom-commands'

    (defvar my-org-custom-daily-agenda
      ;;
      ;; tags-todo "+PRIORITY=\"A\""
      ;;
      ;; So we match everything and then skip entries with
      ;; `org-agenda-skip-function'.
      `((tags-todo "*"
  		   ((org-agenda-overriding-header "Important tasks without a date\n")
  		    (org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
  		    (org-agenda-skip-function
  		     `(org-agenda-skip-entry-if
  		       'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
  		    (org-agenda-block-separator nil)))
  	(agenda "" ((org-agenda-overriding-header "\nPending scheduled tasks")
  		    (org-agenda-time-grid nil)
  		    (org-agenda-start-on-weekday nil)
  		    (org-agenda-span 1)
  		    (org-agenda-show-all-dates nil)
  		    (org-scheduled-past-days 365)
  		    ;; Excludes today's scheduled items
  		    (org-scheduled-delay-days 1)
  		    (org-agenda-block-separator nil)
  		    (org-agenda-entry-types '(:scheduled))
  		    (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
  		    (org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp "routine"))
  		    (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
  		    (org-agenda-format-date "")))
  	(agenda "" ((org-agenda-overriding-header "\nToday's agenda\n")
  		    (org-agenda-span 1)
  		    (org-deadline-warning-days 0)
  		    (org-agenda-block-separator nil)
  		    (org-scheduled-past-days 0)
  		    (org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp "routine"))
  		    ;; We don't need the `org-agenda-date-today'
  		    ;; highlight because that only has a practical
  		    ;; utility in multi-day views.
  		    (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
  		    (org-agenda-format-date "%A %-e %B %Y")))
  	(agenda "" ((org-agenda-overriding-header "\nNext three days\n")
  		    (org-agenda-start-on-weekday nil)
  		    (org-agenda-start-day nil)
  		    (org-agenda-start-day "+1d")
  		    (org-agenda-span 3)
  		    (org-deadline-warning-days 0)
  		    (org-agenda-block-separator nil)
  		    (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))))
  	(agenda "" ((org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n")
  		    (org-agenda-time-grid nil)
  		    (org-agenda-start-on-weekday nil)
  		    ;; We don't want to replicate the previous section's
  		    ;; three days, so we start counting from the day after.
  		    (org-agenda-start-day "+4d")
  		    (org-agenda-span 14)
  		    (org-agenda-show-all-dates nil)
  		    (org-deadline-warning-days 0)
  		    (org-agenda-block-separator nil)
  		    (org-agenda-entry-types '(:deadline))
  		    (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)))))
      "Custom agenda for use in `org-agenda-custom-commands'.")

    
    (setq org-agenda-custom-commands
  	  `(("A" "Daily agenda and top priority tasks"
  	     ,my-org-custom-daily-agenda
  	     ((org-agenda-fontify-priorities nil)
  	      (org-agenda-prefix-format "	 %t %s")
  	      (org-agenda-dim-blocked-tasks nil)))
  	    ;; ("P" "Plain text daily agenda and top priorities"
  	    ;;  ,my-org-custom-daily-agenda
  	    ;;  ((org-agenda-with-colors nil)
  	    ;;   (org-agenda-prefix-format "%t %s")
  	    ;;   (org-agenda-current-time-string ,(car (last org-agenda-time-grid)))
  	    ;;   (org-agenda-fontify-priorities nil)
  	    ;;   (org-agenda-remove-tags t))
  	    ;;  ("agenda.txt"))
  	    ))


    ;; habits
    (require 'org-habit)
    (setq org-habit-graph-column 50)
    (setq org-habit-preceding-days 9)
    (setq org-habit-show-all-today t)
    )

#+end_src
** Org Bullets Package
prettifies org-mode 
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
** org habits stats
#+begin_src emacs-lisp
  (use-package org-habit-stats
    :ensure)



#+end_src

* Vertico
#+begin_src emacs-lisp
  ;; Vertico
  ;; VERTical Interactive Completion
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src
* Marginalia
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src
* Consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
	   ;; run a command from the current active major/minor - mode.
	   ;; can narrow to local-minor/global-minor/major with the keys l/g/m
	   ("C-c M-x" . consult-mode-command)
	   ("C-x C-b". consult-buffer)
	   ("M-s M-l". consult-line)
	   ("M-s M-g". consult-grep)
	   ("M-s M-o". consult-outline)
	   )
    )
#+end_src
* Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim))
    :init
    )
#+end_src
* Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
* Denote
:PROPERTIES:
:ID:       60189a31-2193-4906-ad87-c8e074810aca
:END:
Now, what if I want to reference the source when =denote-region= is
called?

1. The function, =my-denote-region-get-source-references=, checks
   the current buffer mode, if it is =eww-mode= it inserts the url as a
   reference, if it is a file it inserts the
2. The function, =denote-region-with-reference= calls =my-denote-region= and
   then adds the reference at the end of the file by calling the first
   function
3. The function, =my-denote-region= is my version of the function
   =denote-region= which adds also prompts for a signature.
#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :init
    (setq denote-directory '"~/Nextcloud/Documents/publicNotes")
    :bind
    (:map global-map
	  ("C-c n j" . denote-journal-extras-new-or-existing-entry)
	  ("C-c n r" . my-denote-reference)
	  ("C-c n i" . my-denote-inbox)
	  ("C-c n n" . my-denote-zk)
	  ("C-c n t" . my-denote-tech-journal-new-or-existing-entry)
	  )	  
    :config
    ;; set the order of denote naming scheme
    (setq denote-file-name-components-order '(identifier signature title keywords ))

    ;; Variant of `my-denote-region' to reference the source
    (defun my-denote-region-get-source-reference ()
      "Get a reference to the source for use with `my-denote-region'.
       The reference is a URL or an Org-formatted link to a file."
      ;; We use a `cond' here because we can extend it to cover more
      ;; cases.
      (cond
       ((derived-mode-p 'eww-mode)
	(plist-get eww-data :url))
       ;; Here we are just assuming an Org format.  We can make this more
       ;; involved, if needed.
       (buffer-file-name
	(format "[[file:%s][%s]]" buffer-file-name (buffer-name)))))

    (defun my-denote-region (&optional lst)
      "Call `denote-subdirectory-signature-title-keywords' and insert therein the text of the active region.
			    If LST is not provided, use the default list '(title signature)."
      (declare (interactive-only t))
      (interactive)
      (let ((denote-prompts (or lst '(subdirectory signature title keywords))))  ;; Use LST or default '(title signature)
	(if-let (((region-active-p)) 
		 ;; Capture the text early, otherwise it will be empty
		 ;; the moment `insert` is called.
		 (text (buffer-substring-no-properties (region-beginning) (region-end))))
	    (progn
	      (let ((denote-ignore-region-in-denote-command t))
		(call-interactively #'denote))
	      (push-mark (point))
	      (insert text)
	      (run-hook-with-args 'denote-region-after-new-note-functions (mark) (point)))
	  ;; If no region is active, just call `denote` with the prompt list.
	  (call-interactively #'denote))))

    (defun my-denote-region-with-reference-zk ()
      "Like `denote-region', but add the context afterwards.
				For how the context is retrieved, see `my-denote-region-get-source-reference'."
      (interactive)
      (let ((context (my-denote-region-get-source-reference))
	    (denote-directory "~/Nextcloud/Documents/publicNotes/")
	    (denote-file-name-components-order '(signature title keywords identifier)))
	(my-denote-region '(signature title keywords))
	(when context
	  (goto-char (point-max))
	  (insert "\n")
	  (insert context))))

    (defun my-denote-zk ()
      "Like `denote', but with the prompts order of `my-denote-zk'"
      (declare (interactive-only t))
      (interactive)
      (let ((denote-directory "~/Nextcloud/Documents/publicNotes/")
	    (denote-file-name-components-order '(signature title keywords identifier))
	    (denote-prompts '(signature title keywords)))
	(call-interactively 'denote)))

    (defun my-denote-region-with-reference-reference ()
      "Like `my-denote-region-with-reference-zk' but saved as a `reference'
       and has no signature"
      (interactive)
      (let ((context (my-denote-region-get-source-reference))
	    (denote-directory "~/Nextcloud/Documents/publicNotes/references"))
	(my-denote-region '(title keywords))
	(when context
	  (goto-char (point-max))
	  (insert "\n")
	  (insert context))))

    (defun my-denote-inbox ()
      "Create a simple post note, something you might want to remember,
       everything goes"
      (declare (interactive-only t))
      (interactive)
      (let ((denote-directory "~/Nextcloud/Documents/publicNotes/inbox")
	    (denote-infer-keywords nil)
	    (denote-known-keywords '("fleeting"))
	    (denote-prompts '(title keywords)))
	(call-interactively 'denote)))


    (defun my-denote-reference ()
      "Create a reference note"
      (declare (interactive-only t))
      (interactive)
      (let ((denote-directory "~/Nextcloud/Documents/publicNotes/references/")
	    (denote-infer-keywords nil)
	    (denote-known-keywords '("reference" "book"))
	    (denote-prompts '(title keywords)))
	(call-interactively 'denote)))

      (defun my-denote-zk ()
	"Create the main zettelkasten note"
	(declare (interactive-only t))
	(interactive)
	(let ((denote-directory "~/Nextcloud/Documents/publicNotes/")
	      (denote-prompts '(signature title keywords))
	      (denote-file-name-components-order '(signature title keywords identifier)))
	  (call-interactively 'denote)))

    (defun my-denote-rename-file-signature ()
      "rename file using the naming convention I use on my zk notes"
      (declare (interactive-only t))
      (interactive)
      (let ((denote-file-name-components-order '(signature title keywords identifier)))
	(call-interactively 'denote-rename-file-signature)))

    ;; reference: 13. Keep a journal or diary
    ;; added org-anki-journal in the front matter 
    (defun my-denote-tech-journal-new-or-existing-entry()
      "Like `denote-journal-extras-new-or-existing-entry' using the corresponding tech journal directory instead"
      (interactive)
      (let ((denote-journal-extras-keyword "techjournal")
	    (denote-journal-extras-directory "~/Nextcloud/Documents/publicNotes/tech journal")
	    (denote-org-front-matter (concat (string-trim-right denote-org-front-matter "\n") "#+ANKI_DECK: org-anki-journal\n\n* Anki Headers\n\n* Journal")))
	(call-interactively 'denote-journal-extras-new-or-existing-entry)))

    ;; shell file type configuration
    ;; `denote-file-type' is an alist that holds the configuration options
    ;; of every denote associated extension
    ;; see https://protesilaos.com/codelog/2022-10-30-demo-denote-custom-file-type/

    (setq denote-commands-for-new-notes '(denote my-denote-zk my-denote-reference))
    )  

      (defun my-denote-curated ()
	"Create a curated Note, a well established thought, an article"
	(declare (interactive-only t))
	(interactive)
	(let ((denote-directory "~/Nextcloud/Documents/publicNotes/curated")
	      (denote-infer-keywords nil)
	      (denote-known-keywords '("curated"))
	      (denote-prompts '(title keywords)))
	  (call-interactively 'denote)))

      ;; referecnce: 13. Keep a journal or diary
      ;; added org-anki-journal in the front matter 
      (defun my-denote-tech-journal-new-or-existing-entry()
	"Like `denote-journal-extras-new-or-existing-entry' using the corresponding tech journal directory instead"
	(interactive)
	(let ((denote-journal-extras-keyword "techjournal")
	      (denote-journal-extras-directory "~/Nextcloud/Documents/publicNotes/tech journal")
	      (denote-org-front-matter (concat (string-trim-right denote-org-front-matter "\n") "#+ANKI_DECK: org-anki-journal\n")))
	  (call-interactively 'denote-journal-extras-new-or-existing-entry))))
#+end_src
* Dired
** basic config
Taken from protesilaos.com
As I already explained, Dired is a layer of interactivity on top of the standar
Unix tools. We can see this in how Dired produces the File listing and how we
can affect ~ls~ program accepts an ~-l~ flag for a "long", detailed list of
files. This is what Dired uses. But we can pass more flags by setting the value
of ~dired-listing-switches~. Do ~M-X man~ and then search for the ~ls~ manpage
to learn about what I have here. In short:

- A
  show hidden files ("dotfiles"), such as ~.bashrc~, but omit the implied ~.~
  and ~..~ targets. The latter two refer to the present and parent directory,
  respectively.
  
- G
  Do not show the group namd in the long listing. Only show the owner of the
  file.

- F
  Differentiate regular from special files by appending a character to them. The
  ~*~ is for executables, for the ~/~ is for directories, the ~|~ is for a named
  pipe, the ~=~ is for a socket, the ~@~ and the ~>~ are for stuff I have never
  seen.

- h
  make file sizes easier to read, such as ~555k~ instead of ~568024~

- l
  Produce a long, detalied listing. Dired requires this.

- v
  sort files by version numbers, such that ~file1~, ~file2~, ~file10~ appear in
  this order instead of 1, 10, 20. The latter is called "lexicographic"

- -group-directories-first
Does what it says to place all directories before files in the listing. I prefer
this over a strict sorting that does not differentiate between files and
directories

-- time-style-=long-iso
Uses the internation standard for time representation in the file listing. So
we have something like ~2024-06-30 01:15~ to show the last modified time
#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired)
    :bind (:map dired-mode-map
		("C-o" . dired-preview-mode)) ;; toggles prot's preview-mode
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches ;; I have disabled the -v flag because
	  ;; freebsd doesnt have that option
	  "-AFGhlv --group-directories-first --time-style=long-iso"))

#+end_src

** miscellaneous tweaks
These are some minor tweaks that i do not really care about. The only
one which is really nice is in my opinion the hook that involves
~dired-hide-details-mode~. This is the command that hides the noise
output of the ~ls -l~ flag, leaving only the file names in the
list. We can toggle this effect at any time with the ~(~ key, by default.

I disable the repetition of the ~j~ key as I do use ~repeat-mode~.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired)
    :config
    (setq dired-auto-revert-buffer #'dired-directory-changed-p)
    (setq dired-make-directory-clickable t)
    (setq dired-free-space nil)
    (setq dired-mouse-drag-files t)
    (add-hook 'dired-mode-hook #'dired-hide-details-mode)
    (add-hook 'dired-mode-hook #'hl-line-mode)
    (define-key dired-jump-map (kbd "j") nil))
#+end_src
** varius conveniences
The ~dired-aux.el~ and ~dired-x.el~ are two build-in libraries that
provide usefull extras for Dired. The highlights from what I have here
are:
+ the user option ~dired-create-destination-dirs~ and
  ~dired-create-destination-dirs-on-dirsep~, which offer to create the
  specified directory path if missing.
+ the user options ~dired-clean-up-buffers-too!~ and
  ~dired-clean-confirm-killing-deleted-buffers~ which cover the
  deletion of buffers related to files that we deleted from Dired
+ the key binding for ~dired-do-open~, which opens the file or
  directory externally
  #+begin_src emacs-lisp
    (use-package dired-aux
      :ensure nil
      :bind
      (:map dired-mode-map
	    ("C-+" . dired-create-empty-file)
	    ("M-s f" . nil))
      :config
      (setq dired-isearch-filenames 'dwim)
      (setq dired-create-destination-dirs 'ask)
      (setq dired-vc-rename-file t)
      (setq dired-do-revert-buffer (lambda (dir) (not (file-remote-p dir))))
      (setq dired-create-destination-dirs-on-trailing-dirsep t))

    (use-package dired-x
      :ensure nil
      :after dired
      :bind
      (:map dired-mode-map
	    ("I" . dired-info))
      :config
      (setq dired-clean-up-buffer-too t)
      (setq dired-clean-confirm-killing-deleted-buffers t)
      (setq dired-x-hands-off-my-keys t)
      (setq dired-bind-man nil)
      (setq dired-bind-info nil))
  #+end_src
** The dired-subtree section
The ~dired-subtree~ package by Matus Goljer provides the convenience
of quickly revealing the contents of the directory at point. We do not
have to insert its contents below the current listing as we would
normally do in Dired, nor do we have to open another buffer just to
check if we need to go further.

#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))
#+end_src
** dired-preview
#+begin_src emacs-lisp
  (use-package dired-preview
    :ensure t
    :config
    (setq dired-preview-delay 0.1)
    )

#+end_src
* Latex
** Auctex
#+begin_src emacs-lisp
  (use-package auctex
    :ensure t    
    :config
    (setq-default TeX-master nil)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    ;; if you often use \include or \input, make AUCTEX aware of the multifile doc structure
    ;; https://www.gnu.org/software/auctex/manual/auctex/Multifile.html
    ;; set pdf tools as the default auctex pdf viewer
    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
    (setq TeX-source-correlate-start-server t)
    (setq LaTeX-default-options "a4paper,12pt,draft")
    ;; automatically insert the other pair of a bracket
    (setq LaTeX-electric-left-right-brace nil)

    ;; no prettified SHIT
    (setq font-latex-fontify-script nil)
    (setq font-latex-math-environments nil)
    ;; update pdf tools buffer
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) 
#+end_src
** LaTeX-auto-activating-snippets (laas)
:PROPERTIES:
:ID:       622ec87b-cc5c-4f9f-b310-534226dd12d7
:END:
This package need to have ~aas~ installed as well.
https://github.com/tecosaur/LaTeX-auto-activating-snippets
#+begin_src emacs-lisp
  (use-package laas
    :ensure t
    :hook (( LaTeX-mode . laas-mode)
	   (org-mode . laas-mode))

    :config ; do whatever here
    (aas-set-snippets 'laas-mode 
      ;; set condition!
      :cond #'texmathp ;; expand only while in math
      "lim" '(yas "\\lim_{x\\to\\infty} $0")
      "cap" '(yas "\\cap$1")		      
      "cup" '(yas "\\cup$1")
      "ceil" '(yas "\\lceil $1 \\rceil $0")
      "flr" '(yas "\\lfloor $1 \\rfloor $0")
      "mod" '(yas "\\mod $1")
      "cir" "\\circ " ;; composition
      ";;x" "\\oplus"
      "supp" "\\supp"
      "On" "O(n)"
      "O1" "O(1)"
      ":=" "\\coloneqq"
      "Olog" "O(\\log n)"
      "Olon" "O(n \\log n)"
      ";;{" " \\subseteq "
      "sq" '(yas "\\sqrt{$1} $0")		      
      ;; bind to functions!
      "Sum" (lambda () (interactive)
	      (yas-expand-snippet "\\sum_{n=$1}^{$2} $0"))
      "Prod" (lambda () (interactive)
	       (yas-expand-snippet "\\prod_{$1}^{$2} $0"))
      "Span" (lambda () (interactive)
	       (yas-expand-snippet "\\Span($1)$0"))
      ;; add accent snippets
      :cond #'laas-object-on-left-condition
      "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))
      :cond (lambda() (not (texmathp))) ;;expand when not in math 
      "fm" '(yas "\\\\($1\\\\)")
      "cpp" '(yas "\\cp{P}")
      "cpv" '(yas "\\cp{V}")
      ))
#+end_src

* YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config 
    (setq yas-snippet-dirs '("~/Nextcloud/snippets/"))  
    (yas-global-mode 1))
#+end_src
* Diary
First I want to change the directory of the diary file in order to
allign with the rest of my note-taking workflow
#+begin_src emacs-lisp
  (use-package diary
    :ensure nil
    :defer t
    :init
    (setq diary-file "~/Nextcloud/org/diary"))
#+end_src
* Calendar
The main reason why I wanted to insert my location on emacs-calendar
was in order for emacs to be able to pick my current sunset and
sunrise times and choose a theme accordingly.
#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :commands (calendar)
    :config
    (setq calendar-latitude 41.08499)
    (setq calendar-longitude 23.54757)
    (setq calendar-location-name "Serres, Greece")
    )
#+end_src
* Modus Themes
:PROPERTIES:
:ID:       9d0cbd6e-75b7-442f-a34b-618a59843523
:END:
change the theme based on the sunset and sunrise times.
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :demand t
    :bind (("<f5>" . modus-themes-toggle)
	   ("C-<f5>" . modus-themes-select))
    :config

    (defun my-dark-theme-p()
      "returns non-nil if `lxappearance' has set a dark theme in its config file"
      (string-match-p
       "dark"
       (shell-command-to-string "cat ~/.config/xsettingsd/xsettingsd.conf |grep Net/ThemeName")))

    (if (my-dark-theme-p) 
	(modus-themes-load-theme 'modus-vivendi)
      (modus-themes-load-theme 'modus-operandi))


    (setq modus-themes-to-toggle '(modus-operandi modus-vivendi)))
#+end_src

* RSS/Atom 
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :defer t
    :config
    (setq elfeed-feeds '("https://protesilaos.com/master.xml"
			 "https://lyra.horse/blog/posts/index.xml"
			 "http://www.masteringemacs.org/feed"
			 "https://karthinks.com/index.xml")))
#+end_src
* browse-url
basic configuration for EWW(Emas Web Browser). EWW loads, parses and
displays web pages using [[*shr (simple HTML renderer)][shr]]. A prequisite for using shr is building
emacs with libxml2 support.
#+begin_src emacs-lisp
  (use-package browse-url
    :ensure nil
    :defer t
    :config
    (setq browse-url-browser-function 'eww-browse-url)
    (setq browse-url-secondary-browser-function 'browse-url-default-browser))
#+end_src
* shr (simple HTML renderer)
#+begin_src emacs-lisp
  (use-package shr
    :ensure nil
    :defer t
    :config
    (setq shr-use-colors nil)             ; t is bad for accessibility
    (setq shr-use-fonts nil)              ; t is not for me
    (setq shr-max-image-proportion 0.6)
    (setq shr-image-animate nil)          ; No GIFs, thank you!
    (setq shr-width fill-column)          ; check `prot-eww-readable'
    (setq shr-max-width fill-column)
    (setq shr-discard-aria-hidden t)
    (setq shr-cookie-policy nil))
#+end_src
* Markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :config
    (setq markdown-fontify-code-blocks-natively t))
#+end_src
* Development
** Languages
*** Language Server
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :defer t
    :bind (("C-c C-<tab>" . lsp-ui-doc-show)
    	 ("C-<tab>" . lsp-ui-doc-focus-frame)
    	 ("C-c C-r" . lsp-ui-peek-find-references)
    	 ("C-c o" . lsp-ui-peek-find-definitions))
    :commands (lsp lsp-deferred) ;; lsp mode gets loaded when lsp, lsp-deferred are triggered
    :hook (LaTeX-mode . lsp-deferred)
    :config
    (lsp-enable-which-key-integration t)
    (setq lsp-ui-doc-show-with-mouse 1)
    (setq read-process-output-max (* 1024 1024))
    (setq lsp-ui-sideline-enable t)
    :preface
    (defun lsp-booster--advice-json-parse (old-fn &rest args)
      "Try to parse bytecode instead of json."
      (or
       (when (equal (following-char) ?#)
         (let ((bytecode (read (current-buffer))))
  	 (when (byte-code-function-p bytecode)
             (funcall bytecode))))
       (apply old-fn args)))

    (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
      "Prepend emacs-lsp-booster command to lsp CMD."
      (let ((orig-result (funcall old-fn cmd test?)))
        (if (and (not test?)                             ;; for check lsp-server-present?
                 (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
                 lsp-use-plists
                 (not (functionp 'json-rpc-connection))  ;; native json-rpc
                 (executable-find "emacs-lsp-booster"))
            (progn
              (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
                (setcar orig-result command-from-exec-path))
              (message "Using emacs-lsp-booster for %s!" orig-result)
              (cons "emacs-lsp-booster" orig-result))
  	orig-result)))

    :init
    (advice-add (if (progn (require 'json)
                           (fboundp 'json-parse-buffer))
                    'json-parse-buffer
                  'json-read)
                :around
                #'lsp-booster--advice-json-parse)
    (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command))


  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :after lsp-mode)



#+end_src
*** Python
#+begin_src emacs-lisp
  (use-package direnv
      :ensure t
      :config
      (direnv-mode))

  (use-package python-mode
    :mode ("\\.py\\`" . python-mode)
    :hook
    (python-mode . direnv-mode)
    (python-mode . company-mode)
    (python-mode . yas-minor-mode))


    (use-package lsp-pyright
    :ensure t
    :hook
    (python-mode . (lambda ()
                     (require 'lsp-pyright)
                     (lsp-deferred))))

#+end_src
*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t    
    :defer t
    :mode ("\\.rs\\'" . rust-mode)
    :hook (rust-mode . lsp-deferred))

#+end_src
*** Latex
#+begin_src emacs-lisp
  (use-package lsp-latex
       ;; this uses texlab
       :ensure t
       :config
       (progn
         (add-hook 'bibtex-mode-hook 'lsp)
         )
       )
#+end_src

*** C
#+begin_src emacs-lisp
  (use-package c-mode
    :mode ("\\.c\\`" . c-mode)
    :hook (c-mode . lsp-deferred))
#+end_

** Tree sitter
#+begin_src emacs-lisp
  ;; (setq treesit-language-source-alist
  ;;       '((bash "https://github.com/tree-sitter/tree-sitter-bash")
  ;; 	(c "https://github.com/tree-sitter/tree-sitter-c")
  ;; 	(elisp "https://github.com/tree-sitter/tree-sitter-elisp") ;;this doesn't work
  ;; 	(go "https://github.com/tree-sitter/tree-sitter-go")
  ;; 	(html "https://github.com/tree-sitter/tree-sitter-html")
  ;; 	(python "https://github.com/tree-sitter/tree-sitter-python")
  ;; 	(rust "https://github.com/tree-sitter/tree-sitter-rust")))
  ;; (setq major-mode-remap-alist
  ;;       '((python-mode . python-ts-mode)
  ;; 	(sh-mode . bash-ts-mode)
  ;; 	(rust-mode . rust-ts-mode)
  ;; 	(html-mode . html-ts-mode)))



  ;; this will get uncommented when needed - also when I am done with
  ;; lsp configuration
  ;; I can't have tree sitter cluttering my mind 
#+end_src
* Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t      
    :hook (lsp-mode LaTeX-mode)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    ;; (:map lsp-mode-map
    ;; 	("<tab>" . company-indent-or-complete-common))
    :custom   
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)

    )
#+end_src
* htmlize
#+begin_src emacs-lisp
  (use-package htmlize
    :load-path "~/.emacs.d/emacs-htmlize"
    :defer t)
#+end_src

* Kindle
#+begin_src emacs-lisp
  (use-package clip2org
    :load-path "~/.emacs.d/clip2org/"
    :config
    (setq clip2org-clippings-file "~/Downloads/My Clippings.txt"))
#+end_src
* mu4e
#+begin_src emacs-lisp

  (use-package mu4e
    :ensure nil    
    ;; we do ensure nil because we are using the mu4e installed by the package manager
    ;; of our linux distribution
    ;; we might need to add a load path
    :load-path "/usr/share/emacs/site-lisp/elpa-src/mu4e-1.8.14/"
    :config
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/.mail/uni/")

    (setq mu4e-drafts-folder "/uni/Drafts")
    (setq mu4e-sent-folder "/uni/Sent Items")
    (setq mu4e-refile-folder "/uni/Archive")
    (setq mu4e-trash-folder "/uni/Deleted Items")

    (setq mu4e-maildir-shortcuts
	  '(("/uni/Inbox" . ?i)
	    ("/uni/Deleted Items" . ?t)
	    ("/uni/Drafts" . ?d)
	    ("/uni/Archive" . ?a)
	    ("/uni/Sent Items" . ?s)))

    (require 'cl-lib)
    (require 'smtpmail)

    ;;; Call the oauth2ms program to fetch the authentication token
    (defun fetch-access-token ()
      (with-temp-buffer
	(call-process "oauth2ms" nil t nil "--encode-xoauth2")
	(buffer-string)))
    (add-to-list 'smtpmail-auth-supported 'xoauth2)

       ;;; Add new authentication method for xoauth2
    (cl-defmethod smtpmail-try-auth-method
      (process (_mech (eql xoauth2)) user password)
      (let* ((access-token (fetch-access-token)))
	(smtpmail-command-or-throw
	 process
	 (concat "AUTH XOAUTH2 " access-token)
	 235)))

       ;;; Register the method
    (with-eval-after-load 'smtpmail
      (add-to-list 'smtpmail-auth-supported 'xoauth2))

    ;;smtp config
    (setq smtpmail-smtp-server "smtp.office365.com"
	  smtp-default-smtp-server "smtp.office365.com"
	  smtpmail-smtp-service 587
	  smtpmail-stream-type 'starttls
	  message-send-mail-function 'smtpmail-send-it
	  smtpmail-auth-credentials nil)
    ;;
    (setq user-mail-address "std154940@ac.eap.gr"
	  user-full-name "Georgios Kiriazidis")

    (setq smtpmail-debug-info t)
    (setq smtpmail-debug-verb t)
    )

#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* tmr
#+begin_src emacs-lisp
  ;; https://protesilaos.com/emacs/tmr
  (use-package tmr
    :ensure t  
    :config
    (setq tmr-sound-file "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga")
    (setq tmr-notification-urgency 'normal)
    (setq tmr-descriptions-list 'tmr-description-history)
    (define-key global-map "\C-ct" 'tmr))
#+end_src
* isearch
#+begin_src emacs-lisp
  (use-package isearch
    :ensure nil
    :config
    (setq isearch-lazy-count t)
    (setq isearch-lazy-highlight t))

#+end_src
* mydict
#+begin_src emacs-lisp
  (use-package dict
    :ensure nil
    :load-path "my-dict"
    :bind
    ("C-c d d" . my-dict-insert-word)
    :config
    (setq my-dict-filename "~/Nextcloud/Notes/languages/english/english.org")
    )
#+end_src

* color parenthesis

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t)
#+end_src

* pdftools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :init
    (pdf-tools-install)
    :ensure
    :config
    (defun my-turn-off-line-numbers ()
      "Disable line numbering in the current buffer."
      (display-line-numbers-mode -1))
    (add-hook 'pdf-view-mode-hook #'my-turn-off-line-numbers))
#+end_src

* project
#+begin_src emacs-lisp
  (use-package project
    :ensure nil
    :config
    (setq project-vc-extra-root-markers '(".project")))  
#+end_src

* kmacro
#+begin_src emacs-lisp
  (use-package kmacro
    :ensure nil
    :bind(:map global-map
	       ("C-x e" . kmacro-call-macro)))
#+end_src

* ispell
https://emacs.stackexchange.com/questions/20679/enable-greek-spellchecking
#+begin_src emacs-lisp
  (use-package ispell
    :ensure nil
    :config
    (setq ispell-program-name "hunspell")
    ;; you could set `ispell-dictionary` instead but `ispell-local-dictionary' has higher priority
    (setq ispell-dictionary "english")
    (setq ispell-local-dictionary-alist '(("english"
					   "[[:alpha:]]" "[^[:alpha:]]" "[']" nil
					   ("-d" "en_US") nil utf-8)
					  ("el_GR"
					   "[[:alpha:]]" "[^[:alpha:]]" "[']" nil
					   ("-d" "el_GR") nil iso-8859-7)
					  ("greek"
					   "[[:alpha:]]" "[^[A-Za-z]]" "[']" nil
					   ("-d" "el_GR_UTF8") nil utf-8)))
    ;; new variable `ispell-hunspell-dictionary-alist' is defined in Emacs
    ;; If it's nil, Emacs tries to automatically set up the dictionaries.

    (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)

    (defun  ispell-switch-dictionary()
      "Switch greek and english dictionaries."
      (interactive)
      (let* ((dict ispell-current-dictionary)
	     (new (if (string= dict "greek") "english"
		    "greek")))
	(ispell-change-dictionary new)
	(message "Dictionary switched to %s" new)))
    (define-key global-map (kbd "<f6>") 'ispell-switch-dictionary)
    )
#+end_src

* Window
#+begin_src emacs-lisp
  (setq display-buffer-alist
        '(
    	;; ;; matcher can be a regexp that matches the buffers name as shown bellow
    	;; ("\\*Python\\*"
    	;;  ;; list of display functions
    	;;  (display-buffer-reuse-mode-window display-buffer-below-selected)
    	;;  ;; (PARAMETER . VALUE)
    	;;  (window-height . fit-to-window) ;;fit buffer to the size of the window
    	;;  (dedicated . t)
    	;;  )

    	;; matcher can also be a major mode
    	((or . (( derived-mode . compilation-mode)
    		(derived-mode . inferior-python-mode))) 
    	 (display-buffer-reuse-mode-window display-buffer-below-selected)
    	 ;; (PARAMETER . VALUE)
    	 (window-height . fit-to-window) ;;fit buffer to the size of the window
    	 (dedicated . t))
  	))

  ;; windows keys
  ;; Keybindings for window management
  (define-key global-map (kbd "C-x C-n") 'next-buffer)
  (define-key global-map (kbd "C-x C-p") 'previous-buffer)
  (define-key global-map (kbd "C-x !") 'delete-other-windows-vertically)
  (define-key global-map (kbd "C-x _") 'balance-windows)
  (define-key global-map (kbd "C-x }") 'enlarge-window)
  (define-key global-map (kbd "C-x {") 'shrink-window)
  (define-key global-map (kbd "C-x >") 'enlarge-window-horizontally)
  (define-key global-map (kbd "C-x <") 'shrink-window-horizontally)
  (define-key global-map (kbd "C-x -") 'fit-window-to-buffer)

  ;; Keybindings for resizing windows
  (define-key resize-window-repeat-map (kbd ">") 'enlarge-window-horizontally)
  (define-key resize-window-repeat-map (kbd "<") 'shrink-window-horizontally)

  ;; repeat mode
  (repeat-mode 1)
  (blink-cursor-mode -1)

  ;; works for opening link in the same buffer with org-open-at-point
  (setq org-link-frame-setup '((file . find-file)))

#+end_src

* move text
#+begin_src emacs-lisp
  (use-package move-text
    :ensure t
    :bind
    ("M-p" . move-text-up)
    ("M-n" . move-text-down))
#+end_src
* gptel
#+begin_src emacs-lisp
  (use-package gptel
    :ensure t
    :config
    (setq gptel-api-key (gptel-api-key-from-auth-source))
    (setq gptel-model "Chat-GPT:gpt-4o")
    )
#+end_src
* ox-hugo
#+begin_src emacs-lisp
  (use-package ox-hugo
    :ensure t
    :pin melpa
    :after ox
    :config
    (setq org-hugo-base-dir "~/Projects/blog")
    (setq org-hugo-default-section-directory "posts")
    )
#+end_src
* treemacs
#+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :bind (("C-c p" . treemacs-add-and-display-current-project)
  	   ("M-0" . treemacs-select-window))
      :config
      (treemacs-follow-mode 1))
#+end_src  
#+end_src




